name: Build TWRP

on: 
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo -E apt-get update
        sudo -E apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig python3 repo
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

    - name: Syncing Preparation
      run: |
        git config --global user.name "wodaixin"
        git config --global user.email "6753344+wodaixin@users.noreply.github.com"

    - name: Checkout
      uses: actions/checkout@master

    - name: Start Syncing minimal-manifest-twrp Source
      run: |
        mkdir twrp && cd twrp && mkdir images 
        repo init --depth=1 -u https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp.git -b twrp-12.1
        repo sync

    - name: Start Syncing samsung SM-G7810 (r8q) Device
      working-directory: twrp
      run: |
        cd device
        git clone https://github.com/wodaixin/android_device_samsung_r8q.git samsung/r8q

    - name: Start Build Device && Download images
      working-directory: twrp
      run: |
        export ALLOW_MISSING_DEPENDENCIES=true; . build/envsetup.sh; lunch twrp_r8q-eng
        mka recoveryimage -j$(nproc)
        cp ./out/target/product/r8q/*.img ../images
        make clean
        mka bootimage -j$(nproc)
        cp ./out/target/product/r8q/*.img ../images
        make clean

    # mka vendorbootimage -j$(nproc)
    # cp ./out/target/product/r8q/*.img ../images
    # make clean

    - name: Build project
      run: |
          zip -r my-artifact.zip images

    - name: generate timestamp version
      id: version
      run: |
        echo "::set-output name=timestamp::$(date +%s)"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.timestamp }}
        release_name: Release ${{ steps.version.outputs.timestamp }}
        draft: false
        prerelease: false
          
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./my-artifact.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip